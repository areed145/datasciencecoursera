demo()
demo(graphics)
install.package("KernSmooth")
install.packages("KernSmooth")
Library(KernSmooth)
library(KernSmooth)
demo()
demo(graphics)
DT <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("data.table")
DT
DT[,mean(pwgtp15),by=SEX]
DT[,mean(pwgtp15),by=SEX]
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
install.packages("curl")
library(data.table)
DT <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
# Getting and Cleaning Data
# 1. Merges the training and the test sets to create one data set.
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels + features
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
test <- cbind(testSub, testAct, test)
# merge datasets
comb <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
install.packages("data.table")
install.packages("reshape2")
# Getting and Cleaning Data
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels + features on the mean and standard deviation for each measurement.
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
test <- cbind(testSub, testAct, test)
# Merges the training and the test sets to create one data set.
comb <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
data.table::fwrite(x = comb, file = "tidyData.txt", quote = FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
data.table::setnames(test, colnames(test), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
test <- cbind(testSub, testAct, test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
# Write tidy dataset to file
data.table::fwrite(x = comb, file = "tidyData.txt", quote = FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table","reshape2")
sapply(packages,require,character.only=TRUE,quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,file.path(path,"dataset.zip"))
unzip(zipfile="dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path,"UCI HAR Dataset/activity_labels.txt"),col.names=c("classLabels","activityName"))
features <- fread(file.path(path,"UCI HAR Dataset/features.txt"),col.names=c("index","featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)",features[,featureNames])
measurements <- features[featuresWanted,featureNames]
measurements <- gsub('[()]','',measurements)
# Load train datasets
train <- fread(file.path(path,"UCI HAR Dataset/train/X_train.txt"))[,featuresWanted,with=FALSE]
test <- fread(file.path(path,"UCI HAR Dataset/test/X_test.txt"))[,featuresWanted,with=FALSE]
data.table::setnames(train,colnames(train),measurements)
data.table::setnames(test,colnames(test),measurements)
trainAct <- fread(file.path(path,"UCI HAR Dataset/train/Y_train.txt"),col.names=c("Activity"))
testAct <- fread(file.path(path,"UCI HAR Dataset/test/Y_test.txt"),col.names=c("Activity"))
trainSub <- fread(file.path(path,"UCI HAR Dataset/train/subject_train.txt"),col.names=c("SubjectNum"))
testSub <- fread(file.path(path,"UCI HAR Dataset/test/subject_test.txt"),col.names=c("SubjectNum"))
train <- cbind(trainSub,trainAct,train)
test <- cbind(testSub,testAct,test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[,Activity],levels=activityLabels[["classLabels"]],labels=activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[,SubjectNum])
comb <- reshape2::melt(data=comb,id=c("SubjectNum","Activity"))
comb <- reshape2::dcast(data=comb,SubjectNum+Activity~variable,fun.aggregate=mean)
# Write tidy dataset to file
data.table::fwrite(x=comb,file="tidyData.txt",quote=FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table","reshape2")
sapply(packages,require,character.only=TRUE,quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,file.path(path,"dataset.zip"))
unzip(zipfile="dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path,"UCI HAR Dataset/activity_labels.txt"),col.names=c("classLabels","activityName"))
features <- fread(file.path(path,"UCI HAR Dataset/features.txt"),col.names=c("index","featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)",features[,featureNames])
measurements <- features[featuresWanted,featureNames]
measurements <- gsub('[()]','',measurements)
# Load train datasets
train <- fread(file.path(path,"UCI HAR Dataset/train/X_train.txt"))[,featuresWanted,with=FALSE]
test <- fread(file.path(path,"UCI HAR Dataset/test/X_test.txt"))[,featuresWanted,with=FALSE]
data.table::setnames(train,colnames(train),measurements)
data.table::setnames(test,colnames(test),measurements)
trainAct <- fread(file.path(path,"UCI HAR Dataset/train/Y_train.txt"),col.names=c("Activity"))
testAct <- fread(file.path(path,"UCI HAR Dataset/test/Y_test.txt"),col.names=c("Activity"))
trainSub <- fread(file.path(path,"UCI HAR Dataset/train/subject_train.txt"),col.names=c("SubjectNum"))
testSub <- fread(file.path(path,"UCI HAR Dataset/test/subject_test.txt"),col.names=c("SubjectNum"))
train <- cbind(trainSub,trainAct,train)
test <- cbind(testSub,testAct,test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[,Activity],levels=activityLabels[["classLabels"]],labels=activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[,SubjectNum])
comb <- reshape2::melt(data=comb,id=c("SubjectNum","Activity"))
comb <- reshape2::dcast(data=comb,SubjectNum+Activity~variable,fun.aggregate=mean)
# Write tidy dataset to file
write.table(comb,file="tidy.txt",row.names=FALSE,col.names=TRUE)
View(DT)
library("data.table")
setwd("~/Users/areed145/Library/Mobile Documents/com~apple~CloudDocs/GitHub/datasciencecoursera/4_exploratory_data_analysis")
#Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Prevents histogram from printing in scientific notation
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
powerDT[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates for 2007-02-01 and 2007-02-02
powerDT <- powerDT[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## Plot 1
hist(powerDT[, Global_active_power], main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
setwd("~/Users/areed145/Library/Mobile Documents/com~apple~CloudDocs/GitHub/datasciencecoursera/4_exploratory_data_analysis")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/datasciencecoursera/4_exploratory_data_analysis/course_project_1")
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
powerDT[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates for 2007-02-01 and 2007-02-02
powerDT <- powerDT[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## Plot 1
hist(powerDT[, Global_active_power], main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
library("data.table")
#Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Prevents histogram from printing in scientific notation
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
powerDT[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates for 2007-02-01 and 2007-02-02
powerDT <- powerDT[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## Plot 1
hist(powerDT[, Global_active_power], main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## dev.off()
library("data.table")
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
powerDT[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates
powerDT <- powerDT[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
## Plot 1
png("plot1.png", width=480, height=480)
hist(powerDT[, Global_active_power], main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a datetime column
powerDT[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
## Plot 2
png("plot2.png", width=480, height=480)
plot(x = powerDT[, dateTime], y = powerDT[, Global_active_power], type="l", xlab="", ylab="Global Active Power (kilowatts)")
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a datetime column
powerDT[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
## Plot 2
png("plot2.png", width=480, height=480)
plot(x = powerDT[, dateTime], y = powerDT[, Global_active_power], type="l", xlab="", ylab="Global Active Power (kilowatts)")
View(powerDT)
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a datetime column
powerDT[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
## Plot 2
png("plot2.png", width=480, height=480)
plot(x = powerDT[, dateTime], y = powerDT[, Global_active_power], type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Change Date Column to Date Type
powerDT[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# Filter Dates
powerDT <- powerDT[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
## Plot 1
png("plot1.png", width=480, height=480)
hist(powerDT[, Global_active_power], main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a datetime column
powerDT[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
# Plot 3
png("plot3.png", width=480, height=480)
plot(powerDT[, dateTime], powerDT[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(powerDT[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(powerDT[, dateTime], powerDT[, Sub_metering_3],col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), lwd=c(1,1))
dev.off()
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input = "household_power_consumption.txt", na.strings="?")
# Converts to numeric
powerDT[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# Making a datetime column
powerDT[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime >= "2007-02-01") & (dateTime < "2007-02-03")]
# Plot 4
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# Subplot 1
plot(powerDT[, dateTime], powerDT[, Global_active_power], type="l", xlab="", ylab="Global Active Power")
# Subplot 2
plot(powerDT[, dateTime],powerDT[, Voltage], type="l", xlab="datetime", ylab="Voltage")
# Subplot 3
plot(powerDT[, dateTime], powerDT[, Sub_metering_1], type="l", xlab="", ylab="Energy sub metering")
lines(powerDT[, dateTime], powerDT[, Sub_metering_2], col="red")
lines(powerDT[, dateTime], powerDT[, Sub_metering_3],col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "), lty=c(1,1), bty="n", cex=.5)
# Subplot 4
plot(powerDT[, dateTime], powerDT[,Global_reactive_power], type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
library("data.table")
# Reads in data from file then subsets data for specified dates
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Making a datetime column
powerDT[,dateTime := as.POSIXct(paste(Date,Time),format="%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime>="2007-02-01")&(dateTime<"2007-02-03")]
# Plot 4
png("plot4.png",width=480,height=480)
par(mfrow=c(2,2))
# Subplot 1
plot(powerDT[,dateTime],powerDT[,Global_active_power],type="l",xlab="",ylab="Global Active Power")
# Subplot 2
plot(powerDT[,dateTime],powerDT[,Voltage],type="l",xlab="datetime",ylab="Voltage")
# Subplot 3
plot(powerDT[,dateTime],powerDT[,Sub_metering_1],type="l",xlab="",ylab="Energy sub metering")
lines(powerDT[,dateTime],powerDT[,Sub_metering_2],col="red")
lines(powerDT[,dateTime],powerDT[,Sub_metering_3],col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1),bty="n",cex=.5)
# Subplot 4
plot(powerDT[,dateTime],powerDT[,Global_reactive_power],type="l",xlab="datetime",ylab="Global_reactive_power")
dev.off()
library("data.table")
# Read data
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Making a datetime column
powerDT[,dateTime:=as.POSIXct(paste(Date,Time),format="%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime>="2007-02-01")&(dateTime<"2007-02-03")]
# Plot 4
png("plot4.png",width=480,height=480)
par(mfrow=c(2,2))
# Subplot 1
plot(powerDT[,dateTime],powerDT[,Global_active_power],type="l",xlab="",ylab="Global Active Power")
# Subplot 2
plot(powerDT[,dateTime],powerDT[,Voltage],type="l",xlab="datetime",ylab="Voltage")
# Subplot 3
plot(powerDT[,dateTime],powerDT[,Sub_metering_1],type="l",xlab="",ylab="Energy sub metering")
lines(powerDT[,dateTime],powerDT[,Sub_metering_2],col="red")
lines(powerDT[,dateTime],powerDT[,Sub_metering_3],col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1),bty="n",cex=.5)
# Subplot 4
plot(powerDT[,dateTime],powerDT[,Global_reactive_power],type="l",xlab="datetime",ylab="Global_reactive_power")
dev.off()
library("data.table")
# Read data
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Making a datetime column
powerDT[,dateTime:=as.POSIXct(paste(Date,Time),format="%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime>="2007-02-01")&(dateTime<"2007-02-03")]
# Plot 3
png("plot3.png",width=480,height=480)
plot(powerDT[,dateTime],powerDT[,Sub_metering_1],type="l",xlab="",ylab="Energy sub metering")
lines(powerDT[,dateTime],powerDT[,Sub_metering_2],col="red")
lines(powerDT[,dateTime],powerDT[,Sub_metering_3],col="blue")
legend("topright",col=c("black","red","blue"),c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1),lwd=c(1,1))
dev.off()
library("data.table")
# Read data
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Making a datetime column
powerDT[,dateTime:=as.POSIXct(paste(Date,Time),format="%d/%m/%Y %H:%M:%S")]
# Filter dates
powerDT <- powerDT[(dateTime>="2007-02-01")&(dateTime<"2007-02-03")]
## Plot 2
png("plot2.png",width=480,height=480)
plot(x=powerDT[,dateTime],y=powerDT[,Global_active_power],type="l",xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
library("data.table")
# Read data
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Make date column
powerDT[,Date:=lapply(.SD,as.Date,"%d/%m/%Y"),.SDcols=c("Date")]
# Filter Dates
powerDT <- powerDT[(Date>="2007-02-01")&(Date<="2007-02-02")]
## Plot 1
png("plot1.png",width=480,height=480)
hist(powerDT[,Global_active_power],main="Global Active Power",xlab="Global Active Power (kilowatts)",ylab="Frequency",col="Red")
dev.off()
library("data.table")
# Read data
powerDT <- data.table::fread(input="household_power_consumption.txt",na.strings="?")
# Converts to numeric
powerDT[,Global_active_power:=lapply(.SD,as.numeric),.SDcols=c("Global_active_power")]
# Make date column
powerDT[,Date:=lapply(.SD,as.Date,"%d/%m/%Y"),.SDcols=c("Date")]
# Filter Dates
powerDT <- powerDT[(Date>="2007-02-01")&(Date<="2007-02-02")]
## Plot 1
png("plot1.png",width=480,height=480)
hist(powerDT[,Global_active_power],main="Global Active Power",xlab="Global Active Power (kilowatts)",ylab="Frequency",col="Red")
dev.off()

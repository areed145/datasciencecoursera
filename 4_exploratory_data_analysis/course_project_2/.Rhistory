Library(KernSmooth)
library(KernSmooth)
demo()
demo(graphics)
DT <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("data.table")
DT
DT[,mean(pwgtp15),by=SEX]
DT[,mean(pwgtp15),by=SEX]
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
install.packages("curl")
library(data.table)
DT <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
# Getting and Cleaning Data
# 1. Merges the training and the test sets to create one data set.
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels + features
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
test <- cbind(testSub, testAct, test)
# merge datasets
comb <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
install.packages("data.table")
install.packages("reshape2")
# Getting and Cleaning Data
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels + features on the mean and standard deviation for each measurement.
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
test <- cbind(testSub, testAct, test)
# Merges the training and the test sets to create one data set.
comb <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
data.table::fwrite(x = comb, file = "tidyData.txt", quote = FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataset.zip"))
unzip(zipfile = "dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
data.table::setnames(test, colnames(test), measurements)
trainAct <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
testAct <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
trainSub <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
testSub <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
train <- cbind(trainSub, trainAct, train)
test <- cbind(testSub, testAct, test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[, SubjectNum])
comb <- reshape2::melt(data = comb, id = c("SubjectNum", "Activity"))
comb <- reshape2::dcast(data = comb, SubjectNum + Activity ~ variable, fun.aggregate = mean)
# Write tidy dataset to file
data.table::fwrite(x = comb, file = "tidyData.txt", quote = FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table","reshape2")
sapply(packages,require,character.only=TRUE,quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,file.path(path,"dataset.zip"))
unzip(zipfile="dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path,"UCI HAR Dataset/activity_labels.txt"),col.names=c("classLabels","activityName"))
features <- fread(file.path(path,"UCI HAR Dataset/features.txt"),col.names=c("index","featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)",features[,featureNames])
measurements <- features[featuresWanted,featureNames]
measurements <- gsub('[()]','',measurements)
# Load train datasets
train <- fread(file.path(path,"UCI HAR Dataset/train/X_train.txt"))[,featuresWanted,with=FALSE]
test <- fread(file.path(path,"UCI HAR Dataset/test/X_test.txt"))[,featuresWanted,with=FALSE]
data.table::setnames(train,colnames(train),measurements)
data.table::setnames(test,colnames(test),measurements)
trainAct <- fread(file.path(path,"UCI HAR Dataset/train/Y_train.txt"),col.names=c("Activity"))
testAct <- fread(file.path(path,"UCI HAR Dataset/test/Y_test.txt"),col.names=c("Activity"))
trainSub <- fread(file.path(path,"UCI HAR Dataset/train/subject_train.txt"),col.names=c("SubjectNum"))
testSub <- fread(file.path(path,"UCI HAR Dataset/test/subject_test.txt"),col.names=c("SubjectNum"))
train <- cbind(trainSub,trainAct,train)
test <- cbind(testSub,testAct,test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[,Activity],levels=activityLabels[["classLabels"]],labels=activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[,SubjectNum])
comb <- reshape2::melt(data=comb,id=c("SubjectNum","Activity"))
comb <- reshape2::dcast(data=comb,SubjectNum+Activity~variable,fun.aggregate=mean)
# Write tidy dataset to file
data.table::fwrite(x=comb,file="tidyData.txt",quote=FALSE)
# Getting and Cleaning Data
# Load Packages
packages <- c("data.table","reshape2")
sapply(packages,require,character.only=TRUE,quietly=TRUE)
# Set directory and url
path <- getwd()
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,file.path(path,"dataset.zip"))
unzip(zipfile="dataset.zip")
# Load activity labels and features on the mean and standard deviation for each measurement
activityLabels <- fread(file.path(path,"UCI HAR Dataset/activity_labels.txt"),col.names=c("classLabels","activityName"))
features <- fread(file.path(path,"UCI HAR Dataset/features.txt"),col.names=c("index","featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)",features[,featureNames])
measurements <- features[featuresWanted,featureNames]
measurements <- gsub('[()]','',measurements)
# Load train datasets
train <- fread(file.path(path,"UCI HAR Dataset/train/X_train.txt"))[,featuresWanted,with=FALSE]
test <- fread(file.path(path,"UCI HAR Dataset/test/X_test.txt"))[,featuresWanted,with=FALSE]
data.table::setnames(train,colnames(train),measurements)
data.table::setnames(test,colnames(test),measurements)
trainAct <- fread(file.path(path,"UCI HAR Dataset/train/Y_train.txt"),col.names=c("Activity"))
testAct <- fread(file.path(path,"UCI HAR Dataset/test/Y_test.txt"),col.names=c("Activity"))
trainSub <- fread(file.path(path,"UCI HAR Dataset/train/subject_train.txt"),col.names=c("SubjectNum"))
testSub <- fread(file.path(path,"UCI HAR Dataset/test/subject_test.txt"),col.names=c("SubjectNum"))
train <- cbind(trainSub,trainAct,train)
test <- cbind(testSub,testAct,test)
# Merges the training and the test sets to create one data set
comb <- rbind(train, test)
# Convert classLabels to activityName
comb[["Activity"]] <- factor(comb[,Activity],levels=activityLabels[["classLabels"]],labels=activityLabels[["activityName"]])
comb[["SubjectNum"]] <- as.factor(comb[,SubjectNum])
comb <- reshape2::melt(data=comb,id=c("SubjectNum","Activity"))
comb <- reshape2::dcast(data=comb,SubjectNum+Activity~variable,fun.aggregate=mean)
# Write tidy dataset to file
write.table(comb,file="tidy.txt",row.names=FALSE,col.names=TRUE)
library("data.table")
path <- getwd()
SCC <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data/Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data/summarySCC_PM25.rds"))
# Prevents histogram from printing in scientific notation
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
barplot(totalNEI[, Emissions]
, names = totalNEI[, year]
, xlab = "Years", ylab = "Emissions"
, main = "Emissions over the Years")
library("data.table")
path <- getwd()
SCC <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data/Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data/summarySCC_PM25.rds"))
library("data.table")
path <- getwd()
SCC <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data\Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "exdata-data-NEI_data\summarySCC_PM25.rds"))
library("data.table")
path <- getwd()
pth
path
SCC <- data.table::as.data.table(x = readRDS(file = "Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "summarySCC_PM25.rds"))
library("data.table")
path <- getwd()
SCC <- data.table::as.data.table(x = readRDS(file = "Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "summarySCC_PM25.rds"))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/datasciencecoursera/4_exploratory_data_analysis/course_project_2")
SCC <- data.table::as.data.table(x = readRDS(file = "Source_Classification_Code.rds"))
NEI <- data.table::as.data.table(x = readRDS(file = "summarySCC_PM25.rds"))
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
barplot(totalNEI[, Emissions]
, names = totalNEI[, year]
, xlab = "Years", ylab = "Emissions"
, main = "Emissions over the Years")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab = "Years", ylab = "Emissions", main = "Emissions over the Years")
SCC <- readRDS("Source_Classification_Code.rds")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
SCC <- readRDS("Source_Classification_Code.rds")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/datasciencecoursera/4_exploratory_data_analysis/course_project_2")
SCC <- readRDS("Source_Classification_Code.rds")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols = c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm = TRUE), .SDcols = c("Emissions"), by = year]
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
View(totalNEI)
View(totalNEI)
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names = totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols=c("Emissions")]
totalNEI <- NEI[, lapply(.SD, sum, na.rm=TRUE), .SDcols=c("Emissions"), by=year]
png("plot1.png", width=480, height=480)
barplot(totalNEI[, Emissions], names=totalNEI[, year], xlab="Years", ylab="Emissions", main="Emissions over the Years")
NEI[, Emissions := lapply(.SD, as.numeric), .SDcols=c("Emissions")]
View(NEI)
View(NEI)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
aggTotals <- aggregate(Emissions ~ year,NEI, sum)
png("plot1.png", width=480, height=480)
barplot(aggTotals$Emissions, names.arg=aggTotals$year, xlab="Years", ylab="Emissions", main="Emissions over the Years")
dev.off()
View(NEI)
View(NEI)
View(aggTotals)
View(aggTotals)
aggTotals[,Emissions:=lapply(.SD,as.numeric)]
png("plot1.png", width=480, height=480)
barplot(aggTotals$Emissions/10^6, names.arg=aggTotals$year, xlab="Years", ylab="Emissions", main="Emissions over the Years")
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
aggTotals <- aggregate(Emissions ~ year, NEI, sum)
png("plot1.png", width=480, height=480)
barplot(aggTotals$Emissions/100000, names.arg=aggTotals$year, xlab="Years", ylab="Emissions/100000", main="Emissions over the Years")
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
aggTotals <- aggregate(Emissions ~ year, NEI, sum)
png("plot2.png", width=480, height=480)
barplot(aggTotals$Emissions/100000, names.arg=aggTotals$year, xlab="Years", ylab="Emissions/100000", main="Emissions over the Years")
dev.off()
png("plot2.png", width=480, height=480)
barplot(aggTotals$Emissions/1000, names.arg=aggTotals$year, xlab="Years", ylab="Emissions/1000", main="Emissions over the Years")
dev.off()
png("plot3.png", width=480, height=480)
ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
dev.off()
library("ggplot2")
png("plot3.png", width=480, height=480)
ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
dev.off()
library("data.table")
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot3.png", width=480, height=480)
ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# Gather the subset of the NEI data which corresponds to vehicles
condition <- grepl("vehicle", SCC[, SCC.Level.Two], ignore.case=TRUE)
vehiclesSCC <- SCC[condition, SCC]
vehiclesNEI <- NEI[NEI[, SCC] %in% vehiclesSCC,]
# Subset the vehicles NEI data by each city's fip and add city name.
vehiclesBaltimoreNEI <- vehiclesNEI[fips == "24510",]
vehiclesBaltimoreNEI[, city := c("Baltimore City")]
vehiclesLANEI <- vehiclesNEI[fips == "06037",]
vehiclesLANEI[, city := c("Los Angeles")]
# Combine data.tables into one data.table
bothNEI <- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)
png("plot6.png", width=480, height=480)
ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot3.png", width=480, height=480)
ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
combustionRelated <- grepl("comb", SCC[, SCC.Level.One], ignore.case=TRUE)
coalRelated <- grepl("coal", SCC[, SCC.Level.Four], ignore.case=TRUE)
combustionSCC <- SCC[combustionRelated & coalRelated, SCC]
combustionNEI <- NEI[NEI[,SCC] %in% combustionSCC]
png("plot4.png", width=480, height=480)
ggplot(combustionNEI,aes(x = factor(year),y = Emissions/10^5)) +
geom_bar(stat="identity", fill ="#FF9999", width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot3.png", width=480, height=480)
ggplot(NEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
combustionRelated <- grepl("comb", SCC[, SCC.Level.One], ignore.case=TRUE)
coalRelated <- grepl("coal", SCC[, SCC.Level.Four], ignore.case=TRUE)
combustionSCC <- SCC[combustionRelated & coalRelated, SCC]
combustionNEI <- NEI[NEI[,SCC] %in% combustionSCC]
png("plot4.png", width=480, height=480)
ggplot(combustionNEI,aes(x = factor(year),y = Emissions/10^5)) +
geom_bar(stat="identity", fill ="#FF9999", width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
combustionRelated <- grepl("comb", SCC[, SCC.Level.One], ignore.case=TRUE)
coalRelated <- grepl("coal", SCC[, SCC.Level.Four], ignore.case=TRUE)
combustionSCC <- SCC[(combustionRelated & coalRelated),]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
png("plot4.png", width=480, height=480)
ggplot(combustionNEI,aes(x = factor(year),y = Emissions/10^5)) +
geom_bar(stat="identity", fill ="#FF9999", width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
dev.off()
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
combustionSCC <- SCC[(combustionRelated & coalRelated),]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
png("plot4.png", width=480, height=480)
ggplot(combustionNEI,aes(x = factor(year),y = Emissions/10^5)) +
geom_bar(stat="identity", fill ="#FF9999", width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
combustionSCC <- SCC[(combustionRelated & coalRelated),]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
png("plot4.png", width=480, height=480)
ggplot(combustionNEI,aes(factor(year), Emissions/10^5)) +
geom_bar(stat="identity", fill="#FF9999", width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
vehiclesSCC <- SCC[grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE), SCC]
vehiclesNEI <- NEI[NEI[, SCC] %in% vehiclesSCC,]
baltimoreVehiclesNEI <- vehiclesNEI[fips=="24510",]
png("plot5.png", width=480, height=480)
ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity", fill ="#FF9999" ,width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
dev.off()
vehiclesNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
png("plot5.png", width=480, height=480)
ggplot(vehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity", fill="#FF9999" ,width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
# Subset the vehicles NEI data to Baltimore's fip
vehiclesNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
png("plot5.png", width=480, height=480)
ggplot(vehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity", fill="#FF9999" ,width=0.75) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
dev.off()
library("ggplot2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# Gather the subset of the NEI data which corresponds to vehicles
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
# Subset the vehicles NEI data by each city's fip and add city name.
vehiclesBaltimoreNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
vehiclesBaltimoreNEI$city <- "Baltimore City"
vehiclesLANEI <- vehiclesNEI[vehiclesNEI$fips=="06037",]
vehiclesLANEI$city <- "Los Angeles County"
# Combine data.tables into one data.table
bothNEI <- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)
png("plot6.png", width=480, height=480)
ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
dev.off()
